@page "/statistics"

@using Services
@using Models
@using Controllers
@using Microsoft.AspNetCore.Components.Sections
@inject StatisticsController _statisticsController
@rendermode InteractiveServer

<PageTitle>Statistici generale</PageTitle>
<SectionContent SectionName="Title"> Statistici generale </SectionContent>

<div class="text-center">
    <div class="row p-2">
        <div class="col col-lg-4 py-2">
            <PieChart @ref="gradeDistributionChart" />
        </div>
        <div class="col col-lg-4 py-2">
            <PieChart @ref="resultDistributionChart" />
        </div>
        <div class="col col-lg-4 py-2">
            <PieChart @ref="digitalSkillsChart" />
        </div>
    </div>
    <div class="row justify-content-center p-2 p-lg-4">
        <div class="col col-lg-6 p-2 p-lg-4">
            <BarChart @ref="gradeHistogram" />
        </div>
        <div class="col col-lg-6 p-2 p-lg-4">
            <BarChart @ref="topSpecializations" />
        </div>
    </div>
</div>


@code {
    private PieChart gradeDistributionChart = default!;
    private PieChartOptions gradeDistributionOptions = default!;
    private ChartData gradeDistributionChartData = default!;

    private PieChart resultDistributionChart = default!;
    private PieChartOptions resultDistributionOptions = default!;
    private ChartData resultDistributionChartData = default!;

    private PieChart digitalSkillsChart = default!;
    private PieChartOptions digitalSkillsOptions = default!;
    private ChartData digitalSkillsChartData = default!;

    private BarChart gradeHistogram = default!;
    private ChartData gradeHistogramData = default!;
    private BarChartOptions gradeHistogramOptions = default!;

    private BarChart topSpecializations = default!;
    private ChartData topSpecializationsData = default!;
    private BarChartOptions topSpecializationsOptions = default!;

    protected override void OnInitialized()
    {
        InitGradeDistribution();
        InitResultDistribution();
        InitGradeHistogram();
        InitDigitalSkills();
        InitTopSpecializations();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gradeDistributionChart.InitializeAsync(gradeDistributionChartData, gradeDistributionOptions);
            await resultDistributionChart.InitializeAsync(resultDistributionChartData, resultDistributionOptions);
            await digitalSkillsChart.InitializeAsync(digitalSkillsChartData, digitalSkillsOptions);
            await gradeHistogram.InitializeAsync(gradeHistogramData, gradeHistogramOptions);
            await topSpecializations.InitializeAsync(topSpecializationsData, topSpecializationsOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void InitGradeDistribution()
    {
        Dictionary<string, double?> distribution = _statisticsController.GetGradesDistribution().Result;

        var dataset = new PieChartDataset()
            {
                Data = distribution.Values.ToList<double?>(),
            };
        gradeDistributionChartData = new ChartData { Labels = distribution.Keys.ToList(), Datasets = [dataset] };

        gradeDistributionOptions = new();
        gradeDistributionOptions.Responsive = true;
        gradeDistributionOptions.Plugins.Title!.Text = "Distributia notelor";
        gradeDistributionOptions.Plugins.Title.Display = true;
        gradeDistributionOptions.Plugins.Title.Font = new ChartFont()
            {
                Size = 18,
            };
    }

    private void InitResultDistribution()
    {
        Dictionary<string, double?> passrate = _statisticsController.GetPassRate().Result;

        var dataset = new PieChartDataset()
            {
                Data = passrate.Values.ToList<double?>(),
            };
        resultDistributionChartData = new ChartData { Labels = passrate.Keys.ToList(), Datasets = [dataset] };

        resultDistributionOptions = new();
        resultDistributionOptions.Responsive = true;
        resultDistributionOptions.Plugins.Title!.Text = "Rata de promovare";
        resultDistributionOptions.Plugins.Title.Display = true;
        resultDistributionOptions.Plugins.Title.Font = new ChartFont()
        {
            Size = 18,
        };
    }

    private void InitDigitalSkills()
    {
        Dictionary<string, double?> skills = _statisticsController.GetDigitalSkills().Result;

        var dataset = new PieChartDataset()
            {
                Data = skills.Values.ToList<double?>(),
            };
        digitalSkillsChartData = new ChartData { Labels = skills.Keys.ToList(), Datasets = [dataset] };

        digitalSkillsOptions = new();
        digitalSkillsOptions.Responsive = true;
        digitalSkillsOptions.Plugins.Title!.Text = "Competente digitale";
        digitalSkillsOptions.Plugins.Title.Display = true;
        digitalSkillsOptions.Plugins.Title.Font = new ChartFont()
            {
                Size = 18,
            };
    }

    private void InitGradeHistogram()
    {
        Dictionary<string, double?> histogram = _statisticsController.GetGradesHistogram().Result;
        var labels = histogram.Keys.Reverse().ToList();
        var dataset = new BarChartDataset()
            {
                Data = histogram.Values.Reverse().ToList(),
                BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[5] },
            };
        gradeHistogramData = new ChartData { Labels = labels, Datasets = [dataset] };

        gradeHistogramOptions = new()
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.X },
                IndexAxis = "x"
            };
        gradeHistogramOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Media", Display = true };
        gradeHistogramOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Nr. candidati", Display = true };
        gradeHistogramOptions.Plugins.Title!.Text = "Histograma notelor";
        gradeHistogramOptions.Plugins.Title.Display = true;
        gradeHistogramOptions.Plugins.Title.Font = new ChartFont()
            {
                Size = 18,
            };
        gradeHistogramOptions.Plugins.Legend.Display = false;
    }

    private void InitTopSpecializations()
    {
        Dictionary<string, double?> specs = _statisticsController.GetTopSpecializations().Result;
        var labels = specs.Keys.ToList();
        var dataset = new BarChartDataset()
            {
                Data = specs.Values.ToList(),
                BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[7] },
            };
        topSpecializationsData = new ChartData { Labels = labels, Datasets = [dataset] };

        topSpecializationsOptions = new()
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.X },
                IndexAxis = "x"
            };
        topSpecializationsOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Specializare", Display = true };
        topSpecializationsOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Nr. candidati", Display = true };
        topSpecializationsOptions.Plugins.Title!.Text = "Top specializări";
        topSpecializationsOptions.Plugins.Title.Display = true;
        topSpecializationsOptions.Plugins.Title.Font = new ChartFont()
            {
                Size = 18,
            };
        topSpecializationsOptions.Plugins.Legend.Display = false;
    }
}
