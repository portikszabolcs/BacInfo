@page "/counties"

@using Services
@using Models
@using Controllers
@using Microsoft.AspNetCore.Components.Sections
@using System.Collections.Immutable;

@inject CountyController _countyController
@attribute [StreamRendering]

<PageTitle>Judete</PageTitle>
<SectionContent SectionName="Title"> Judete </SectionContent>

<div class="p-3">
    <BarChart @ref="averagesChart" />
</div>
<div class="p-3">
    <BarChart @ref="studentsChart" />
</div>
<div class="p-3">
    <BarChart @ref="passRateChart" />
</div>

@code {
    private BarChart averagesChart = default!;
    private ChartData averagesData = default!;
    private BarChartOptions averagesChartOptions = new BarChartOptions
        {
            Responsive = true,
            Interaction = new Interaction { Mode = InteractionMode.X },
            IndexAxis = "x"
        };

    private BarChart studentsChart = default!;
    private ChartData studentsData = default!;
    private BarChartOptions studentsChartOptions = new BarChartOptions
        {
            Responsive = true,
            Interaction = new Interaction { Mode = InteractionMode.X },
            IndexAxis = "x"
        };

    private BarChart passRateChart = default!;
    private ChartData passRateData = default!;
    private BarChartOptions passRateChartOptions = new BarChartOptions
        {
            Responsive = true,
            Interaction = new Interaction { Mode = InteractionMode.X },
            IndexAxis = "x"
        };

    private List<string> counties = [];
    private string[] colors = ColorUtility.CategoricalTwelveColors;

    protected override async Task OnInitializedAsync()
    {
        var cnt = await _countyController.GetCountyNames();
        counties = cnt.ToList();
        InitAveragesChart();
        InitStudentsChart();
        InitPassRateChart();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await averagesChart.InitializeAsync(averagesData, averagesChartOptions);
            await studentsChart.InitializeAsync(studentsData, studentsChartOptions);
            await passRateChart.InitializeAsync(passRateData, passRateChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void InitAveragesChart()
    {
        var counts = _countyController.GetCountyAverages().Result;
        var dataset = new BarChartDataset()
            {
                Data = counts,
                BackgroundColor = new List<string> { colors[9] },
                BorderWidth = new List<double> { 0 },
            };
        averagesData = new ChartData { Labels = counties, Datasets = [dataset] };

        averagesChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Judete", Display = true };
        averagesChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Medii", Display = true };
        averagesChartOptions.Plugins.Legend.Display = false;
    }

    private void InitStudentsChart()
    {
        var counts = _countyController.GetCountyStudents().Result;
        var dataset = new BarChartDataset()
            {
                Data = counts,
                BackgroundColor = new List<string> { colors[11] },
                BorderWidth = new List<double> { 0 },
            };
        studentsData = new ChartData { Labels = counties, Datasets = [dataset] };

        studentsChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Judete", Display = true };
        studentsChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Nr. candidati", Display = true };
        studentsChartOptions.Plugins.Legend.Display = false;
    }

    private void InitPassRateChart()
    {
        var counts = _countyController.GetCountyPassRate().Result;
        var dataset = new BarChartDataset()
            {
                Data = counts,
                BackgroundColor = new List<string> { colors[10] },
                BorderWidth = new List<double> { 0 },
            };
        passRateData = new ChartData { Labels = counties, Datasets = [dataset] };

        passRateChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Judete", Display = true };
        passRateChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Rata de promovare (%)", Display = true };
        passRateChartOptions.Plugins.Legend.Display = false;
    }
}
